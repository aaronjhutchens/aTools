#!/bin/bash
# Written for Solaris, which is important.

shopt -s extglob
PASSWD=/var/yp/passwd
SHADOW=/var/yp/shadow
LOGFILE="./useradd.log"
YP_DIR=/var/yp/
MAX_UID=0
USERNAME=''
REAL_NAME=''
GROUP_ID=1010
LOCKFILE="/tmp/UserTmpLock"
INTERACTIVE=1

debug(){
        echo $PASSWD
        echo $YP_DIR
        echo $CURRENT_UID
        echo $NEW_UID
        echo $USERNAME
        echo $REAL_NAME
        echo $NEW_UNIQUE
        echo $CURRENT_UNIQUE
        echo $PASSWD_ENTRY
}

usage(){
        echo -en "\nUsage: ./addUser -u <new username> -n <real name> [-fgsh]\n"
}

print_help(){
        echo -en "\n\t-u <username>\t\tTakes username as an argument\n"
        echo -en "\t-n <real name>\t\tTakes real name as an argument\n"
        echo -en "\t-f <passwd file>\tOverrides default passwd file path (default: /var/yp/passwd)\n"
        echo -en "\t-s <shadow file>\tOverrides default shadow file path (default: /var/yp/shadow)\n"
        echo -en "\t-g <GID>\t\tOverrides default group ID (default: 1010)\n"
        echo -en "\t-i\t\t\tSet non-interactive mode (no prompts)\n"
        echo -en "\t-m\t\t\tDry run (no make)\n"
        echo -en "\t-h\t\t\tPrints this help document\n\n"
}

while getopts ":u:n:f:g:s:him" opt; do
        case $opt in
                u)
                        USERNAME="$OPTARG"
                        ;;
                n)
                        REAL_NAME="$OPTARG"
                        ;;
                f)
                        PASSWD="$OPTARG"
                        ;;
                g)
                        GROUP_ID="$OPTARG"
                        ;;
                s)
                        SHADOW="$OPTARG"
                        ;;
                h)
                        usage
                        print_help
                        exit 0
                        ;;
                i)
                        INTERACTIVE=0
                        echo "Setting to non-interactive mode!"
                        ;;
                m)
                        echo "Doing a dry run."
                        DRY_RUN=1
                        ;;
                \?)
                        echo "Invalid option"
                        usage
                        exit 0
                        ;;
                :)
                        echo "Option requires an argument"
                        usage
                        exit 0
                        ;;
        esac
done

get_user_details(){
# If not set by options, set username and real name
        if [ -z "$USERNAME" ]
        then
                read -p "Enter the user's username: " USERNAME
        fi

        if [ -z "$REAL_NAME" ]
        then
                read -p "Enter the user's real name: " REAL_NAME
        fi

        UIDS=( $(awk -F: '$3 ~ /^1[34]/ && length($3) < 6 {print $3}' $PASSWD) )
        for i in ${UIDS[@]}; do
                ((i > MAX_UID)) && MAX_UID=$i
        done

        CURRENT_UID=$MAX_UID
        NEW_UID=$[ $MAX_UID + 1 ]
}


sanity_checks(){
# Kill the stupid and broken.
        CURRENT_UNIQUE=$(grep -c ":$CURRENT_UID:" $PASSWD)
        NEW_UNIQUE=$(grep -c ":$NEW_UID:" $PASSWD)
        SHADOW_UNIQUE=$(egrep -c "^$USERNAME:" $SHADOW)
        PASSWD_UNIQUE=$(egrep -c "^$USERNAME:" $PASSWD)

        if [ "$CURRENT_UNIQUE" -ne 1 ] || [ "$NEW_UNIQUE" -ne 0 ]
        then
                echo "There is something wrong with the chosen UID,
                please enter the passwd line manually and check to see what's going on here"
                exit 1
        fi
        if [ "$SHADOW_UNIQUE" -ne 0 ] || [ "$PASSWD_UNIQUE" -ne 0 ]
        then
                echo "Username not unique in the passwd or shadow files, please add manually or change the username"
        exit 1
        fi
}

gen_passwd(){
        PASSWD_ENTRY="$USERNAME:x:$NEW_UID:$GROUP_ID:$REAL_NAME,,,:/home/$USERNAME:/bin/bash"
}

gen_shadow(){
        SHADOW_ENTRY="$USERNAME::0::::::"
}

put_shadow(){
        echo -en "\nAdding the following to $SHADOW:\n\n$SHADOW_ENTRY\n\n"
        (( $INTERACTIVE )) && read -p "Does this look correct? " yes_no

        if [[ ${yes_no:0:1} = *(Y|y) ]] || [[ $INTERACTIVE -eq 0 ]]
        then
                echo $SHADOW_ENTRY >> $SHADOW
                echo "[ $(date +"%m-%d-%y %T") ] Line added to $SHADOW: $SHADOW_ENTRY" >> $LOGFILE
        else
                echo "Exiting"
                exit 1
        fi
}
put_passwd(){
        echo -en "\nAdding the following line to $PASSWD:\n\n$PASSWD_ENTRY\n\n"
        (( $INTERACTIVE )) && read -p "Does this look correct? " yes_no

        if [[ ${yes_no:0:1} = *(Y|y) ]] || [[ $INTERACTIVE -eq 0 ]]
        then
                sed '/'$CURRENT_UID'/ a\
'"$PASSWD_ENTRY"'' $PASSWD > .tmp && cat .tmp > $PASSWD && rm -f .tmp
        echo "Line added, here is raw output from grep:"
        echo "[ $(date +"%m-%d-%y %T") ] Line added to $PASSWD: $PASSWD_ENTRY" >> $LOGFILE
        grep $NEW_UID $PASSWD
        else
                echo "Exiting"
                exit 1
        fi
}

run_make(){
        if [[ "$DRY_RUN" -ne 1 ]]
        then
                pushd $YP_DIR
                echo "[ $(date +"%m-%d-%y %T") ] Running make:" >> $LOGFILE
                #/usr/ccs/bin/make 2>&1 |tee -a $LOGFILE
                echo "[ $(date +"%m-%d-%y %T") ] Make complete" >> $LOGFILE
                popd
        else
                echo "Dry run, not running make!"
        fi
        }

make_lock(){
        echo "Locking execution!"
        trap clean_lock INT TERM EXIT
        #trap "echo 'Exiting prematurely, removing lock file!'; rm -f $LOCKFILE; exit" INT TERM EXIT
        touch $LOCKFILE
}

check_lock(){
        if [[ -e $LOCKFILE ]]
        then
                return 1
        else
                return 0
        fi
}

clean_lock(){
        echo "Removing lock: $LOCKFILE"
        rm -f $LOCKFILE
}

if [[ check_lock -eq 0 ]]
then
        make_lock
        get_user_details
        gen_passwd
        gen_shadow
        sanity_checks
        put_passwd
        put_shadow
        run_make
        #debug
        exit 0
else
        echo -en "\n\nLock file exists at $LOCKFILE\n\nExiting!"
        exit 1
fi

